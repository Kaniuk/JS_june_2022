// - Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів
function Info(id, name, username, email, street, suite, city, zipcode, lat, lng, phone, website, companyName, catchPhrase, bs) {
    this.id = id;
    this.name = name;
    this.username = username;
    this.email = email;
    this.address = {
        street: street,
        suite: suite,
        city: city,
        zipcode: zipcode,
        geo: {
            lat: lat,
            lng: lng
        }
    };
    this.phone = phone;
    this.website = website;
    this.company = {
        companyName: companyName,
        catchPhrase: catchPhrase,
        bs: bs
    };
}

const myInfo = new Info(1, 'Vasyl', 'VasyOk', 'vasya@ukr.net', 'Vesnyana', 'assdsd',
    'Kyiv', 3598, -6589, 6589, '0689745878', 'lll.com', 'FastSpeed', 'gfgfh', 65);
// {
//     id: 1,
//     name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//         street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//         lat: '-37.3159',
//             lng: '81.1496'
//     }
// },
//     phone: '1-770-736-8031 x56442',
//     website: 'hildegard.org',
//     company: {
//     name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
// }
// }


// -  Створити функцію конструктор / клас  який описує об'єкт тегу


function Description(tag_name, tag_description, attributes) {
    this.tag_name = tag_name;
    this.tag_description = tag_description;
    this.attributes = attributes;
}

const descriptions = [
    new Description('a', 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок.',
        [{name: ' accesskey', description: 'Задает адрес документа, на который следует перейти'}, {name: 'download', description: 'Активация ссылки с помощью комбинации клавиш'}]),
    new Description('<div>', 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во' +
        ' внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
        [{name: ' align', description: 'Выравнивание содержимого контейнера <div> по краю.'}, {name: ' title', description: 'Добавляет поясняющий текст к контейнеру <div> в виде всплывающей подсказки, которая отображается, когда курсор мыши задерживается на содержимом.'}]),
    new Description('h1', 'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным.' +
        ' По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
        [{name: 'align', description: 'Выравнивание заголовка текста по краю.'}, {name: 'left',description: 'Выравнивание заголовка по левому краю.'}]),
    new Description('span', 'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль. Например, внутри абзаца (тега <p>) можно изменить цвет и размер первой буквы, если добавить начальный и конечный тег <span> и определить для него стиль текста. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
        [{name: ' class', description: 'Задает стилевой класс, который позволяет связать определенный тег со стилевым оформлением. В значении допускается указывать сразу несколько классов, разделяя их между собой пробелом.'}, {name: ' contenteditable', description: 'Активация ссылки с помощью комбинации клавиш'}]),
    new Description('input', 'Тег <input> является одним из важных элементов HTML и предназначен для создания ссылок.',
        [{name: ' accesskey', description: 'Задает адрес документа, на который следует перейти'}, {name: ' download', description: 'Активация ссылки с помощью комбинации клавиш'}]),
    new Description('form', 'Тег <form> является одним из важных элементов HTML и предназначен для создания ссылок.',
        [{name: ' accesskey', description: 'Задает адрес документа, на который следует перейти'}, {name: ' download', description: 'Активация ссылки с помощью комбинации клавиш'}]),
    new Description('option', 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>.',
        [{name: 'disabled', description: 'Блокирует элемент списка для его выбора.'}, {name: 'label', description: 'Атрибут предназначен для указания метки пункта списка, сокращённой по сравнению с текстом внутри <option>.'}])
];
console.log(descriptions);
// Поля :
// -назва тегу ()
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
// інформацію брати з htmlbook.ru
//
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select
// Приклад результуючого об'єкту
// {
//     titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//     attrs: [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//     {/*some props and values*/},
//     {/*...*/},
//     {/*...*/},
// ]
//
// }